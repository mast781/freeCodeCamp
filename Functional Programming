// Learn About Functional Programming

const prepareTea = () => 'greenTea';

const getTea = (numOfCups) => {
  const teaCups = [];

  for(let cups = 1; cups <= numOfCups; cups += 1) {
    const teaCup = prepareTea();
    teaCups.push(teaCup);
  }
  return teaCups;
};


const tea4TeamFCC = getTea(40);

// Understand Functional Programming Terminology
const prepareGreenTea = () => 'greenTea';

const prepareBlackTea = () => 'blackTea';

const getTea = (prepareTea, numOfCups) => {
  const teaCups = [];

  for(let cups = 1; cups <= numOfCups; cups += 1) {
    const teaCup = prepareTea();
    teaCups.push(teaCup);
  }
  return teaCups;
};

const tea4GreenTeamFCC = getTea(prepareGreenTea, 27);
const tea4BlackTeamFCC = getTea(prepareBlackTea, 13);;

console.log(
  tea4GreenTeamFCC,
  tea4BlackTeamFCC
);

// Return Part of an Array Using the slice Method
const sliceArray = (anim, beginSlice, endSlice) => anim.slice(beginSlice, endSlice)

const inputAnim = ["Cat", "Dog", "Tiger", "Zebra", "Ant"];
sliceArray(inputAnim, 1, 3);

// Remove Elements from an Array Using slice Instead of splice
const nonMutatingSplice = (cities) => cities.slice(0, 3);

const inputCities = ["Chicago", "Delhi", "Islamabad", "London", "Berlin"];
nonMutatingSplice(inputCities);

// Combine Two Arrays Using the concat Method
const nonMutatingConcat = (original, attach) => original.concat(second)

const first = [1, 2, 3];
const second = [4, 5];
nonMutatingConcat(first, second);
